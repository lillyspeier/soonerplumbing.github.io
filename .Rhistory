g1<- glance(m1) %>% # created earlier for my own comparison
mutate(model_type = "Model 1, with intercept")
bind_rows(g0, g1) %>%
select(model_type, nobs, r.squared, adj.r.squared, AIC, BIC) %>%
kable(digits = c(0, 0, 3, 3, 0, 0))
g0 <-glance(m0) %>%
mutate(model_type = "Model 0, no intercept")
g1<- glance(m1) %>% # created earlier for my own comparison
mutate(model_type = "Model 1, with intercept")
bind_rows(g0, g1) %>%
select(model_type, r.squared, adj.r.squared, AIC, BIC) %>%
kable(digits = c(0, 0, 3, 3, 0, 0))
multiple_regression <- function(n, p_minus_1, beta, sigma_sq) {
# cont. indep. variables, no intercept , rnorm()
x_no_int <- matrix(rnorm(n*p_minus_1), nrow = n, ncol = p_minus_1)
# design matrix x, add column of 1s
design_x <- cbind(1, X_without_intercept)
# random error e, norm. dist., mean = 0, var. = sigma_sq
e <- rnorm(n, mean = 0, sd = sqrt(sigma_sq))
# dep. variable y using eqn.: y = xb + e
y <- ((design_x %*% beta) + e)
# create data frame with both variables
data <- data.frame(output = y) %>%
colnames(data)[1] <- "output, y" %>% # naming column header
for (i in 1:p_minus_1) {
data[[paste0("x", i)]] <- x_no_int[, i] # naming rows x1, x2, ... x_p-1
}
# show results
return(data)
}
library(janitor)
library(haven)
library(knitr)
library(broom)
library(magrittr)
library(tidyverse)
theme_set(theme_light())
knitr::opts_chunk$set(comment=NA)
lab06_data <- read_sav("dm_1000.sav") %>% # importing data and selecting variables of interest
na.omit(dm1000[,c("sbp","dbp")]) %>%
select(subject, sbp, dbp)
knitr::include_graphics("matrix_lab06.jpg")
knitr::include_graphics("q1c_lab06.jpg")
knitr::include_graphics("q1d_lab06.jpg")
# data imported in beginning of lab
head(lab06_data)
X <- as.matrix(cbind(1,lab06_data$dbp))
Y <- as.matrix(lab06_data$sbp)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
print(beta_hat)
mean_x <- mean(X)
mean_y <- mean(Y)
X_2b <- (lab06_data$dbp - mean_x) %>%
as.matrix()
Y_2b <- (Y - mean_y)
beta_hat_2b <- (X_2b * Y_2b)/((X_2b)^2)
head(beta_hat_2b) # this value is off but I cannot get R to perform these commands without redefining my X matrix to exclude the row of 1s, which is likely the source of this issue
m0 <- lm(sbp ~ dbp-1, data = lab06_data) # removing intercept as directed
kable(summary(m0)$coefficients, digits = 2)
m1 <- lm(sbp ~ dbp, data = lab06_data) # without removing intercept
kable(summary(m1)$coefficients, digits = 2)
g0 <-glance(m0) %>%
mutate(model_type = "Model 0, no intercept")
g1<- glance(m1) %>% # created earlier for my own comparison
mutate(model_type = "Model 1, with intercept")
bind_rows(g0, g1) %>%
select(model_type, r.squared, adj.r.squared, AIC, BIC) %>%
kable(digits = c(0, 0, 3, 3, 0, 0))
multiple_regression <- function(n, p_minus_1, beta, sigma_sq) {
# cont. indep. variables, no intercept , rnorm()
x_no_int <- matrix(rnorm(n*p_minus_1), nrow = n, ncol = p_minus_1)
# design matrix x, add column of 1s
design_x <- cbind(1, X_without_intercept)
# random error e, norm. dist., mean = 0, var. = sigma_sq
e <- rnorm(n, mean = 0, sd = sqrt(sigma_sq))
# dep. variable y using eqn.: y = xb + e
y <- ((design_x %*% beta) + e)
# create data frame with both variables
data <- data.frame(output = y) %>%
colnames(data)[1] <- "output, y" %>% # naming column header
for (i in 1:p_minus_1) {
data[[paste0("x", i)]] <- x_no_int[, i] # naming rows x1, x2, ... x_p-1
}
# show results
return(data)
}
sessioninfo::session_info()
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2, 1)
multiple_regression <- function(n, p_minus_1, beta, sigma_sq) {
# cont. indep. variables, no intercept , rnorm()
x_no_int <- matrix(rnorm(n*p_minus_1), nrow = n, ncol = p_minus_1)
# design matrix x, add column of 1s
design_x <- cbind(1, x_no_int)
# random error e, norm. dist., mean = 0, var. = sigma_sq
e <- rnorm(n, mean = 0, sd = sqrt(sigma_sq))
# dep. variable y using eqn.: y = xb + e
y <- ((design_x %*% beta) + e)
# create data frame with both variables
data <- data.frame(output = y) %>%
colnames(data)[1] <- "output, y" %>% # naming column header
for (i in 1:p_minus_1) {
data[[paste0("x", i)]] <- x_no_int[, i] # naming rows x1, x2, ... x_p-1
}
# show results
return(data)
}
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2, 1)
multiple_regression <- function(n, p_minus_1, beta, sigma_sq) {
# cont. indep. variables, no intercept , rnorm()
x_no_int <- matrix(rnorm(n*p_minus_1), nrow = n, ncol = p_minus_1)
# design matrix x, add column of 1s
design_x <- cbind(1, x_no_int)
# random error e, norm. dist., mean = 0, var. = sigma_sq
e <- rnorm(n, mean = 0, sd = sqrt(sigma_sq))
# dep. variable y using eqn.: y = xb + e
y <- ((design_x %$% beta) + e)
# create data frame with both variables
data <- data.frame(output = y) %>%
colnames(data)[1] <- "output, y" %>% # naming column header
for (i in 1:p_minus_1) {
data[[paste0("x", i)]] <- x_no_int[, i] # naming rows x1, x2, ... x_p-1
}
# show results
return(data)
}
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2, 1)
set.seed(2024)
dataset1 <- multiple_regression(30, 2, (2,2,2) , 1)
set.seed(2024)
dataset1 <- multiple_regression(30, 2, (2, 2 , 2) , 1)
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2 , 1)
multiple_regression <- function(n, p_minus_1, beta, sigma_sq) {
# cont. indep. variables, no intercept , rnorm()
x_no_int <- matrix(rnorm(n*p_minus_1), nrow = n, ncol = p_minus_1)
# design matrix x, add column of 1s
design_x <- cbind(1, x_no_int)
# random error e, norm. dist., mean = 0, var. = sigma_sq
e <- rnorm(n, mean = 0, sd = sqrt(sigma_sq))
# dep. variable y using eqn.: y = xb + e
y <- ((design_x %*% beta) + e)
# create data frame with both variables
data <- data.frame(output = y)
# naming column header
colnames(data)[1] <- "y_output"
# naming rows x1, x2, ... x_p-1
for (i in 1:p_minus_1) {
data[[paste0("x", i)]] <- x_no_int[, i]
}
# show results
return(data)
}
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2 , 1)
multiple_regression <- function(n, p_minus_1, beta, sigma_sq) {
# cont. indep. variables, no intercept , rnorm()
x_no_int <- matrix(rnorm(n*p_minus_1), nrow = n, ncol = p_minus_1)
# design matrix x, add column of 1s
design_x <- cbind(1, x_no_int)
# random error e, norm. dist., mean = 0, var. = sigma_sq
e <- rnorm(n, mean = 0, sd = sqrt(sigma_sq))
# dep. variable y using eqn.: y = xb + e
y <- ((design_x * beta) + e)
# create data frame with both variables
data <- data.frame(output = y)
# naming column header
colnames(data)[1] <- "y_output"
# naming rows x1, x2, ... x_p-1
for (i in 1:p_minus_1) {
data[[paste0("x", i)]] <- x_no_int[, i]
}
# show results
return(data)
}
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2 , 1)
View(dataset1)
multiple_regression <- function(n, p_minus_1, beta, sigma_sq) {
# cont. indep. variables, no intercept , rnorm()
x_no_int <- matrix(rnorm(n*p_minus_1), nrow = n, ncol = p_minus_1)
# design matrix x, add column of 1s
design_x <- cbind(1, x_no_int)
# random error e, norm. dist., mean = 0, var. = sigma_sq
e <- rnorm(n, mean = 0, sd = sqrt(sigma_sq))
# dep. variable y using eqn.: y = xb + e
y <- ((design_x * beta) + e)
# create data frame with both variables
data <- data.frame(y_output = y)
# naming column header
colnames(data)[1] <- "y_output"
# naming rows x1, x2, ... x_p-1
for (i in 1:p_minus_1) {
data[[paste0("x", i)]] <- x_no_int[, i]
}
# show results
return(data)
}
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2 , 1)
View(dataset1)
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2 , 1)
print(dataset1)
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2 , 1)
head(dataset1)
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2 , 1)
head(dataset1)
dataset2 <- multiple_regression(100, 2, 2, 1)
head(dataset2)
dataset3 <- multiple_regression(200, 2, 2, 1)
head(dataset3)
dataset4 <- multiple_regression(1000, 2, 2, 1)
head(dataset4)
fit_mult_reg <- function(data, predictors, response) {
# convert to matrices
x = as.matrix(cbind(1,data[,predictors]))
y = as.matrix(data[,response])
# max. likelihood estimates (MLEs) of reg. coeffs. = find beta_hat
beta_hat_MLE <- solve(t(x) %*% x) %*% t(x) %*% y
# predicted values
y_hat <- X %*% beta_hat
# residuals
residuals <- y - y_hat
# defining eqns. for SST, SSR, SSE, and MSE (as described in prompt)
SST <- sum((y - mean(y))^2)
SSE <- sum((residuals)^2)
SSR <- SST - SSE
MSE <- (SSE / ((nrow(data)) - nrow(x))) # eqn = sse / n - p, given in prompt
# variance of est. reg. coeffs.
var = MSE[1,1] * solve(t(x) %*% x)
return(list(coefficients = beta_hat_MLE, SST = SST, SSR = SSR, SSE = SSE, MSE = MSE, variance_coefficients = var))
}
dataset1_fit <- fit_mult_reg(dataset1)
dataset1_fit <- fit_mult_reg(dataset1, x, y)
View(dataset1)
dataset1_fit <- fit_mult_reg(dataset1, cbind(dataset1$x1, dataset1$x2), dataset1$y_output)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
dim(y_hat)
dim(y_hat(dataset1$y_output))
fit_mult_reg <- function(data, predictors, response) {
# convert to matrices
x = as.matrix(cbind(1,data[,predictors]))
y = as.matrix(data[,response])
# max. likelihood estimates (MLEs) of reg. coeffs. = find beta_hat
beta_hat_MLE <- solve(t(x) %*% x) %*% t(x) %*% y
# predicted values
y_hat <- X %*% beta_hat
# residuals
residuals <- y - y_hat
# defining eqns. for SST, SSR, SSE, and MSE (as described in prompt)
SST <- sum((y - mean(y))^2)
SSE <- sum((residuals)^2)
SSR <- SST - SSE
MSE <- (SSE / ((nrow(data)) - nrow(x))) # eqn = sse / n - p, given in prompt
# variance of est. reg. coeffs.
var = MSE[1,1] * solve(t(x) %*% x)
return(list(coefficients = beta_hat_MLE, SST = SST, SSR = SSR, SSE = SSE, MSE = MSE, variance_coefficients = var))
}
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
fit_mult_reg <- function(data, predictors, response) {
# convert to matrices
x = as.matrix(cbind(1,data[,predictors]))
y = as.matrix(data[,response])
# max. likelihood estimates (MLEs) of reg. coeffs. = find beta_hat
beta_hat_MLE <- solve(t(x) %*% x) %*% t(x) %*% y
# predicted values
y_hat <- X %*% beta_hat_MLE
# residuals
residuals <- y - y_hat
# defining eqns. for SST, SSR, SSE, and MSE (as described in prompt)
SST <- sum((y - mean(y))^2)
SSE <- sum((residuals)^2)
SSR <- SST - SSE
MSE <- (SSE / ((nrow(data)) - nrow(x))) # eqn = sse / n - p, given in prompt
# variance of est. reg. coeffs.
var = MSE[1,1] * solve(t(x) %*% x)
return(list(coefficients = beta_hat_MLE, SST = SST, SSR = SSR, SSE = SSE, MSE = MSE, variance_coefficients = var))
}
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
fit_mult_reg <- function(data, predictors, response) {
# convert to matrices
x = as.matrix(cbind(1,data[,predictors]))
y = as.matrix(data[,response])
# max. likelihood estimates (MLEs) of reg. coeffs. = find beta_hat
beta_hat_MLE <- solve(t(x) %*% x) %*% t(x) %*% y
# predicted values
y_hat <- X %*% beta_hat_MLE
# residuals
residuals <- y - y_hat
# defining eqns. for SST, SSR, SSE, and MSE (as described in prompt)
SST <- sum((y - mean(y))^2)
SSE <- sum((residuals)^2)
SSR <- SST - SSE
MSE <- (SSE / ((nrow(data)) - length(predictors))) # eqn = sse / n - p, given in prompt
# variance of est. reg. coeffs.
var = MSE * solve(t(x) %*% x)
return(list(coefficients = beta_hat_MLE, SST = SST, SSR = SSR, SSE = SSE, MSE = MSE, variance_coefficients = var))
}
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
fit_mult_reg <- function(data, predictors, response) {
# convert to matrices
x = as.matrix(cbind(1,data[,predictors]))
y = as.matrix(data[,response])
# max. likelihood estimates (MLEs) of reg. coeffs. = find beta_hat
beta_hat_MLE <- solve(t(x) %*% x) %*% t(x) %*% y
# predicted values
y_hat <- x %*% beta_hat_MLE
# residuals
residuals <- y - y_hat
# defining eqns. for SST, SSR, SSE, and MSE (as described in prompt)
SST <- sum((y - mean(y))^2)
SSE <- sum((residuals)^2)
SSR <- SST - SSE
MSE <- (SSE / ((nrow(data)) - length(predictors))) # eqn = sse / n - p, given in prompt
# variance of est. reg. coeffs.
var = MSE * solve(t(x) %*% x)
return(list(coefficients = beta_hat_MLE, SST = SST, SSR = SSR, SSE = SSE, MSE = MSE, variance_coefficients = var))
}
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
View(dataset1_fit)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
head(dataset1_fit)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
print(dataset1_fit)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
dataset2_fit <- fit_mult_reg(dataset2, c("x1", "x2"), "y_output")
dataset3_fit <- fit_mult_reg(dataset3, c("x1", "x2"), "y_output")
dataset4_fit <- fit_mult_reg(dataset4, c("x1", "x2"), "y_output")
dataset1_4_fit_results <- bind_rows(dataset1_fit, dataset2_fit, dataset3_fit, dataset4_fit)
print(dataset1_4_fit_results)
View(dataset1_4_fit_results)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
print(dataset1_fit)
dataset2_fit <- fit_mult_reg(dataset2, c("x1", "x2"), "y_output")
print(dataset2_fit)
dataset3_fit <- fit_mult_reg(dataset3, c("x1", "x2"), "y_output")
print(dataset3_fit)
dataset4_fit <- fit_mult_reg(dataset4, c("x1", "x2"), "y_output")
print(dataset4_fit)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
dataset2_fit <- fit_mult_reg(dataset2, c("x1", "x2"), "y_output")
dataset3_fit <- fit_mult_reg(dataset3, c("x1", "x2"), "y_output")
dataset4_fit <- fit_mult_reg(dataset4, c("x1", "x2"), "y_output")
fit_results <- cbind(dataset1_fit, dataset2_fit, dataset3_fit, dataset4_fit)
print(fit_results)
View(dataset1_fit)
print(dataset1_fit$variance_coefficients)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
dataset2_fit <- fit_mult_reg(dataset2, c("x1", "x2"), "y_output")
dataset3_fit <- fit_mult_reg(dataset3, c("x1", "x2"), "y_output")
dataset4_fit <- fit_mult_reg(dataset4, c("x1", "x2"), "y_output")
combined_fit <- cbind(dataset1_fit, dataset2_fit, dataset3_fit, dataset4_fit) %>%
list(dataset1_fit$coefficients, dataset2_fit$coefficients, dataset3_fit$coefficients, dataset4_fit$coefficients, dataset1_fit$variance_coefficients, dataset2_fit$variance_coefficients, dataset3_fit$variance_coefficients, dataset4_fit$variance_coefficients)
print(combined_fit)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
dataset2_fit <- fit_mult_reg(dataset2, c("x1", "x2"), "y_output")
dataset3_fit <- fit_mult_reg(dataset3, c("x1", "x2"), "y_output")
dataset4_fit <- fit_mult_reg(dataset4, c("x1", "x2"), "y_output")
overall_fit <- cbind(dataset1_fit, dataset2_fit, dataset3_fit, dataset4_fit)
print(overall_fit)
fit_coefficients <- list(dataset1_fit$coefficients, dataset2_fit$coefficients, dataset3_fit$coefficients, dataset4_fit$coefficients)
print(fit_coefficients)
fit_var_coeff <- list(dataset1_fit$variance_coefficients, dataset2_fit$variance_coefficients, dataset3_fit$variance_coefficients, dataset4_fit$variance_coefficients)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
dataset2_fit <- fit_mult_reg(dataset2, c("x1", "x2"), "y_output")
dataset3_fit <- fit_mult_reg(dataset3, c("x1", "x2"), "y_output")
dataset4_fit <- fit_mult_reg(dataset4, c("x1", "x2"), "y_output")
overall_fit <- cbind(dataset1_fit, dataset2_fit, dataset3_fit, dataset4_fit) %>%
select(SST, SSR, SSE, MSE)
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
dataset2_fit <- fit_mult_reg(dataset2, c("x1", "x2"), "y_output")
dataset3_fit <- fit_mult_reg(dataset3, c("x1", "x2"), "y_output")
dataset4_fit <- fit_mult_reg(dataset4, c("x1", "x2"), "y_output")
overall_fit <- cbind(dataset1_fit, dataset2_fit, dataset3_fit, dataset4_fit)
print(overall_fit)
# coefficients cannot be seen in overall_fit results displayed- printing separately
fit_coefficients <- list(dataset1_fit$coefficients, dataset2_fit$coefficients, dataset3_fit$coefficients, dataset4_fit$coefficients)
print(fit_coefficients)
fit_var_coeff <- list(dataset1_fit$variance_coefficients, dataset2_fit$variance_coefficients, dataset3_fit$variance_coefficients, dataset4_fit$variance_coefficients)
print(fit_var_coeff)
library(janitor)
library(haven)
library(knitr)
library(broom)
library(magrittr)
library(tidyverse)
theme_set(theme_light())
knitr::opts_chunk$set(comment=NA)
lab06_data <- read_sav("dm_1000.sav") %>% # importing data and selecting variables of interest
na.omit(dm1000[,c("sbp","dbp")]) %>%
select(subject, sbp, dbp)
knitr::include_graphics("matrix_lab06.jpg")
knitr::include_graphics("q1c_lab06.jpg")
knitr::include_graphics("q1d_lab06.jpg")
# data imported in beginning of lab
head(lab06_data)
X <- as.matrix(cbind(1,lab06_data$dbp))
Y <- as.matrix(lab06_data$sbp)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
print(beta_hat)
mean_x <- mean(X)
mean_y <- mean(Y)
X_2b <- (lab06_data$dbp - mean_x) %>%
as.matrix()
Y_2b <- (Y - mean_y)
beta_hat_2b <- (X_2b * Y_2b)/((X_2b)^2)
head(beta_hat_2b) # this value is off but I cannot get R to perform these commands without redefining my X matrix to exclude the row of 1s, which is likely the source of this issue
m0 <- lm(sbp ~ dbp-1, data = lab06_data) # removing intercept as directed
kable(summary(m0)$coefficients, digits = 2)
m1 <- lm(sbp ~ dbp, data = lab06_data) # without removing intercept
kable(summary(m1)$coefficients, digits = 2)
g0 <-glance(m0) %>%
mutate(model_type = "Model 0, no intercept")
g1<- glance(m1) %>% # created earlier for my own comparison
mutate(model_type = "Model 1, with intercept")
bind_rows(g0, g1) %>%
select(model_type, r.squared, adj.r.squared, AIC, BIC) %>%
kable(digits = c(0, 0, 3, 3, 0, 0))
multiple_regression <- function(n, p_minus_1, beta, sigma_sq) {
# cont. indep. variables, no intercept , rnorm()
x_no_int <- matrix(rnorm(n*p_minus_1), nrow = n, ncol = p_minus_1)
# design matrix x, add column of 1s
design_x <- cbind(1, x_no_int)
# random error e, norm. dist., mean = 0, var. = sigma_sq
e <- rnorm(n, mean = 0, sd = sqrt(sigma_sq))
# dep. variable y using eqn.: y = xb + e
y <- ((design_x * beta) + e)
# create data frame with both variables
data <- data.frame(y_output = y)
# naming column header
colnames(data)[1] <- "y_output"
# naming rows x1, x2, ... x_p-1
for (i in 1:p_minus_1) {
data[[paste0("x", i)]] <- x_no_int[, i]
}
# show results
return(data)
}
set.seed(2024)
dataset1 <- multiple_regression(30, 2, 2 , 1)
head(dataset1)
dataset2 <- multiple_regression(100, 2, 2, 1)
head(dataset2)
dataset3 <- multiple_regression(200, 2, 2, 1)
head(dataset3)
dataset4 <- multiple_regression(1000, 2, 2, 1)
head(dataset4)
fit_mult_reg <- function(data, predictors, response) {
# convert to matrices
x = as.matrix(cbind(1,data[,predictors]))
y = as.matrix(data[,response])
# max. likelihood estimates (MLEs) of reg. coeffs. = find beta_hat
beta_hat_MLE <- solve(t(x) %*% x) %*% t(x) %*% y
# predicted values
y_hat <- x %*% beta_hat_MLE
# residuals
residuals <- y - y_hat
# defining eqns. for SST, SSR, SSE, and MSE (as described in prompt)
SST <- sum((y - mean(y))^2)
SSE <- sum((residuals)^2)
SSR <- SST - SSE
MSE <- (SSE / ((nrow(data)) - length(predictors))) # eqn = sse / n - p, given in prompt
# variance of est. reg. coeffs.
var = MSE * solve(t(x) %*% x)
return(list(coefficients = beta_hat_MLE, SST = SST, SSR = SSR, SSE = SSE, MSE = MSE, variance_coefficients = var))
}
dataset1_fit <- fit_mult_reg(dataset1, c("x1", "x2"), "y_output")
dataset2_fit <- fit_mult_reg(dataset2, c("x1", "x2"), "y_output")
dataset3_fit <- fit_mult_reg(dataset3, c("x1", "x2"), "y_output")
dataset4_fit <- fit_mult_reg(dataset4, c("x1", "x2"), "y_output")
overall_fit <- cbind(dataset1_fit, dataset2_fit, dataset3_fit, dataset4_fit)
print(overall_fit)
# coefficients cannot be seen in overall_fit results displayed- printing separately
fit_coefficients <- list(dataset1_fit$coefficients, dataset2_fit$coefficients, dataset3_fit$coefficients, dataset4_fit$coefficients)
print(fit_coefficients)
fit_var_coeff <- list(dataset1_fit$variance_coefficients, dataset2_fit$variance_coefficients, dataset3_fit$variance_coefficients, dataset4_fit$variance_coefficients)
print(fit_var_coeff)
sessioninfo::session_info()
install.packages(usethis)
install.packages("usethis")
library(usethis)
use_git_config(user.name = "Lilly Speier", user.email = "lxs850@case.edu")
require(SASxport) # needed to load NHANES data
library(dplyr)
library(foreign) # needed to load NHANES data
library(tidyverse)
theme_set(theme_light())
knitr::opts_chunk$set(comment=NA)
# downloaded NHANES 2017-2020 data directly from CDC website
cbc_diff <- read.xport("~/Documents/GitHub/lillyspeier.github.io/data/P_CBC.xpt.txt") # laboratory set, complete blood count (cbc) with 5-part differential in whole blood
demographics <- read.xport("~/Documents/GitHub/lillyspeier.github.io/data/P_DEMO.xpt.txt") %>% # demographics data
filter(RIDSTATR == 2) %>% # focusing on subjects who have been interviewed and examined
filter(RIDAGEYR >= 2 & RIDAGEYR <= 19 ) %>% # focusing on subjects under the age of 80
mutate(age = RIDAGEYR, identifier = SEQN, gender = RIAGENDR, country_origin = DMDBORN4) %>% # renaming variables
mutate(gender_class = case_when(gender == 1 ~ "Male", gender == 2 ~ "Female")) %>% # creating factors/levels for gender
mutate(gender_class = factor(gender_class, levels = c("Male","Female"))) %>%
mutate(country_class = case_when(country_origin == 1 ~ "U.S.", country_origin == 2 ~ "Other", country_origin == 77 ~ "Unknown", country_origin == 99 ~ "Unknown")) %>% # creating factors/levels for country of origin
mutate(country_class = factor(country_class, levels = c("U.S.","Other", "Unknown"))) %>%
select(identifier, age, gender, gender_class, country_origin, country_class)
# selecting variables of interest
head(demographics) # displaying resultant data after changes and selections
body_measures <- read.xport("~/Documents/GitHub/lillyspeier.github.io/data/P_BMX.xpt.txt") %>% # examination set, body measures data
mutate(identifier = SEQN, weight = BMXWT, bmi = BMXBMI, bmi_class = BMDBMIC) %>%
mutate(bmi_group = case_when(bmi_class == 1 ~ "Underweight", bmi_class == 2 ~ "Normal weight", bmi_class == 3 ~ "Overweight", bmi_class == 4 ~ "Obese", bmi_class == . ~ "NA")) %>%
mutate(bmi_group = factor(bmi_group, levels = c("Underweight", "Normal weight", "Overweight", "Obese", "NA")))
select(identifier, weight, bmi, bmi_class, bmi_group)
setwd("~/Documents/GitHub/soonerplumbing.github.io")
